// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: protos/blogs.proto

package go_blog_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Blogs_Create_FullMethodName = "/Blogs/Create"
	Blogs_Get_FullMethodName    = "/Blogs/Get"
	Blogs_Update_FullMethodName = "/Blogs/Update"
	Blogs_Delete_FullMethodName = "/Blogs/Delete"
)

// BlogsClient is the client API for Blogs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlogsClient interface {
	Create(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*PostResponse, error)
	Get(ctx context.Context, in *PostId, opts ...grpc.CallOption) (*PostResponse, error)
	Update(ctx context.Context, in *UpdatePost, opts ...grpc.CallOption) (*PostResponse, error)
	Delete(ctx context.Context, in *PostId, opts ...grpc.CallOption) (*DeletePost, error)
}

type blogsClient struct {
	cc grpc.ClientConnInterface
}

func NewBlogsClient(cc grpc.ClientConnInterface) BlogsClient {
	return &blogsClient{cc}
}

func (c *blogsClient) Create(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*PostResponse, error) {
	out := new(PostResponse)
	err := c.cc.Invoke(ctx, Blogs_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsClient) Get(ctx context.Context, in *PostId, opts ...grpc.CallOption) (*PostResponse, error) {
	out := new(PostResponse)
	err := c.cc.Invoke(ctx, Blogs_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsClient) Update(ctx context.Context, in *UpdatePost, opts ...grpc.CallOption) (*PostResponse, error) {
	out := new(PostResponse)
	err := c.cc.Invoke(ctx, Blogs_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blogsClient) Delete(ctx context.Context, in *PostId, opts ...grpc.CallOption) (*DeletePost, error) {
	out := new(DeletePost)
	err := c.cc.Invoke(ctx, Blogs_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlogsServer is the server API for Blogs service.
// All implementations must embed UnimplementedBlogsServer
// for forward compatibility
type BlogsServer interface {
	Create(context.Context, *CreatePostRequest) (*PostResponse, error)
	Get(context.Context, *PostId) (*PostResponse, error)
	Update(context.Context, *UpdatePost) (*PostResponse, error)
	Delete(context.Context, *PostId) (*DeletePost, error)
	mustEmbedUnimplementedBlogsServer()
}

// UnimplementedBlogsServer must be embedded to have forward compatible implementations.
type UnimplementedBlogsServer struct {
}

func (UnimplementedBlogsServer) Create(context.Context, *CreatePostRequest) (*PostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedBlogsServer) Get(context.Context, *PostId) (*PostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBlogsServer) Update(context.Context, *UpdatePost) (*PostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedBlogsServer) Delete(context.Context, *PostId) (*DeletePost, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedBlogsServer) mustEmbedUnimplementedBlogsServer() {}

// UnsafeBlogsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlogsServer will
// result in compilation errors.
type UnsafeBlogsServer interface {
	mustEmbedUnimplementedBlogsServer()
}

func RegisterBlogsServer(s grpc.ServiceRegistrar, srv BlogsServer) {
	s.RegisterService(&Blogs_ServiceDesc, srv)
}

func _Blogs_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blogs_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).Create(ctx, req.(*CreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blogs_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blogs_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).Get(ctx, req.(*PostId))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blogs_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePost)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blogs_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).Update(ctx, req.(*UpdatePost))
	}
	return interceptor(ctx, in, info, handler)
}

func _Blogs_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlogsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Blogs_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlogsServer).Delete(ctx, req.(*PostId))
	}
	return interceptor(ctx, in, info, handler)
}

// Blogs_ServiceDesc is the grpc.ServiceDesc for Blogs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Blogs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Blogs",
	HandlerType: (*BlogsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Blogs_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Blogs_Get_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Blogs_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Blogs_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/blogs.proto",
}
